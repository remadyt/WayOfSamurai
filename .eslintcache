[{"D:\\it-incubator\\WayOfSamurai\\src\\redux\\redux-store.ts":"1","D:\\it-incubator\\WayOfSamurai\\src\\components\\Header\\Header.tsx":"2","D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\Profile.tsx":"3","D:\\it-incubator\\WayOfSamurai\\src\\components\\Dialogs\\Dialogs.tsx":"4","D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"5","D:\\it-incubator\\WayOfSamurai\\src\\components\\Dialogs\\DialogsContainer.tsx":"6","D:\\it-incubator\\WayOfSamurai\\src\\App.tsx":"7","D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"8","D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\MyPosts\\Posts\\Post.tsx":"9","D:\\it-incubator\\WayOfSamurai\\src\\redux\\dialogs-reducer.tsx":"10","D:\\it-incubator\\WayOfSamurai\\src\\redux\\profile-reducer.tsx":"11","D:\\it-incubator\\WayOfSamurai\\src\\index.tsx":"12","D:\\it-incubator\\WayOfSamurai\\src\\components\\Navbar\\Navbar.tsx":"13","D:\\it-incubator\\WayOfSamurai\\src\\components\\Users\\Users.tsx":"14","D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"15","D:\\it-incubator\\WayOfSamurai\\src\\redux\\user-reducer.ts":"16","D:\\it-incubator\\WayOfSamurai\\src\\components\\Users\\UsersContainer.tsx":"17","D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\ProfileContainer.tsx":"18","D:\\it-incubator\\WayOfSamurai\\src\\redux\\auth-reducer.tsx":"19","D:\\it-incubator\\WayOfSamurai\\src\\components\\Header\\HeaderContainer.tsx":"20","D:\\it-incubator\\WayOfSamurai\\src\\api\\api.ts":"21"},{"size":602,"mtime":1619527340885,"results":"22","hashOfConfig":"23"},{"size":655,"mtime":1619103585203,"results":"24","hashOfConfig":"23"},{"size":458,"mtime":1618838211038,"results":"25","hashOfConfig":"23"},{"size":1672,"mtime":1618506952736,"results":"26","hashOfConfig":"23"},{"size":1002,"mtime":1617461097380,"results":"27","hashOfConfig":"28"},{"size":607,"mtime":1618506878731,"results":"29","hashOfConfig":"23"},{"size":992,"mtime":1619097408100,"results":"30","hashOfConfig":"23"},{"size":1337,"mtime":1618505915663,"results":"31","hashOfConfig":"23"},{"size":525,"mtime":1617457265220,"results":"32","hashOfConfig":"23"},{"size":1518,"mtime":1618506648088,"results":"33","hashOfConfig":"23"},{"size":1641,"mtime":1618839107679,"results":"34","hashOfConfig":"23"},{"size":342,"mtime":1619099219323,"results":"35","hashOfConfig":"23"},{"size":658,"mtime":1617984320741,"results":"36","hashOfConfig":"23"},{"size":2556,"mtime":1619537706767,"results":"37","hashOfConfig":"23"},{"size":856,"mtime":1618840022653,"results":"38","hashOfConfig":"23"},{"size":4555,"mtime":1619538975357,"results":"39","hashOfConfig":"23"},{"size":2478,"mtime":1619538768382,"results":"40","hashOfConfig":"23"},{"size":1768,"mtime":1619540464632,"results":"41","hashOfConfig":"23"},{"size":1312,"mtime":1619539674106,"results":"42","hashOfConfig":"23"},{"size":788,"mtime":1619539082016,"results":"43","hashOfConfig":"23"},{"size":845,"mtime":1619539540903,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1192i2p",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1gqdnj9",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\it-incubator\\WayOfSamurai\\src\\redux\\redux-store.ts",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Header\\Header.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\Profile.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Dialogs\\Dialogs.tsx",["91"],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["92"],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Dialogs\\DialogsContainer.tsx",["93"],"import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {dialogsPageType} from \"../../typeAll\";\r\nimport {sendMessage, updateNewMessage} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    state: dialogsPageType\r\n}\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType):mapStateToPropsType => {\r\n    return{\r\n        state: state.dialogsPage\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer = connect(mapStateToProps,{sendMessage, updateNewMessage})(Dialogs)\r\nexport default DialogsContainer\r\n",["94","95"],"D:\\it-incubator\\WayOfSamurai\\src\\App.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\MyPosts\\Posts\\Post.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\redux\\dialogs-reducer.tsx",["96"],"import {\r\n    ActionsType,\r\n    dialogsPage,\r\n    dialogsPageType,\r\n    messageType,\r\n    sendMessageType,\r\n    updateNewMessageType\r\n} from \"../typeAll\";\r\n\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'How are you?'},\r\n        {id: 2, message: 'How old are you'},\r\n        {id: 3, message: 'Where are you from?'},\r\n    ] as Array<messageType>,\r\n    dialogs: [\r\n        {id: 1, name: 'Dmitriy'},\r\n        {id: 2, name: 'Maxim'},\r\n        {id: 3, name: 'Kirill'},\r\n    ] as Array<dialogsPage>,\r\n    newMessageBody: ''\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody\r\n            return {\r\n                ...state,\r\n                newMessageBody: '',\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY'\r\nconst SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\n\r\nexport const sendMessage = (): sendMessageType => ({type: SEND_MESSAGE})\r\nexport const updateNewMessage = (body: string): updateNewMessageType => ({type: UPDATE_NEW_MESSAGE_BODY, body})\r\n\r\n\r\nexport default dialogsReducer","D:\\it-incubator\\WayOfSamurai\\src\\redux\\profile-reducer.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\index.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Navbar\\Navbar.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Users\\Users.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["97"],"D:\\it-incubator\\WayOfSamurai\\src\\redux\\user-reducer.ts",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Users\\UsersContainer.tsx",["98","99","100","101"],"import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow,\r\n    unfollow,\r\n    getUsers,\r\n    toggleFollowingProgress, setCurrentPage, setTotalCount, setUsers, toggleIsFetching,\r\n\r\n\r\n} from \"../../redux/user-reducer\";\r\nimport {UserType} from \"../../typeAll\";\r\nimport Users from \"./Users\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\n\r\ntype PropsType = {\r\n    users: UserType[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgress: Array<number>\r\n    getUsers: (pageSize: number, currentPage: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<PropsType, {}> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (currentPage: number) => {\r\n        this.props.getUsers(currentPage, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {\r\n                this.props.isFetching ? <Preloader/> : null\r\n            }\r\n            <Users\r\n                users={this.props.users}\r\n                currentPage={this.props.currentPage}\r\n                pageSize={this.props.pageSize}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                onPageChanged={this.onPageChanged}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number,\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        users: state.userPage.users,\r\n        pageSize: state.userPage.pageSize,\r\n        totalUsersCount: state.userPage.totalUsersCount,\r\n        currentPage: state.userPage.currentPage,\r\n        isFetching: state.userPage.isFetching,\r\n        followingInProgress: state.userPage.followingInProgress\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow, unfollow,\r\n    toggleFollowingProgress,\r\n    getUsers,\r\n\r\n\r\n})(UsersContainer)","D:\\it-incubator\\WayOfSamurai\\src\\components\\Profile\\ProfileContainer.tsx",["102"],"D:\\it-incubator\\WayOfSamurai\\src\\redux\\auth-reducer.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\components\\Header\\HeaderContainer.tsx",[],"D:\\it-incubator\\WayOfSamurai\\src\\api\\api.ts",[],{"ruleId":"103","severity":1,"message":"104","line":6,"column":9,"nodeType":"105","messageId":"106","endLine":6,"endColumn":20},{"ruleId":"103","severity":1,"message":"107","line":1,"column":8,"nodeType":"105","messageId":"106","endLine":1,"endColumn":13},{"ruleId":"103","severity":1,"message":"107","line":1,"column":8,"nodeType":"105","messageId":"106","endLine":1,"endColumn":13},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"103","severity":1,"message":"112","line":4,"column":5,"nodeType":"105","messageId":"106","endLine":4,"endColumn":20},{"ruleId":"113","severity":1,"message":"114","line":24,"column":17,"nodeType":"115","endLine":24,"endColumn":57},{"ruleId":"103","severity":1,"message":"116","line":8,"column":30,"nodeType":"105","messageId":"106","endLine":8,"endColumn":44},{"ruleId":"103","severity":1,"message":"117","line":8,"column":46,"nodeType":"105","messageId":"106","endLine":8,"endColumn":59},{"ruleId":"103","severity":1,"message":"118","line":8,"column":61,"nodeType":"105","messageId":"106","endLine":8,"endColumn":69},{"ruleId":"103","severity":1,"message":"119","line":8,"column":71,"nodeType":"105","messageId":"106","endLine":8,"endColumn":87},{"ruleId":"103","severity":1,"message":"120","line":7,"column":9,"nodeType":"105","messageId":"106","endLine":7,"endColumn":16},"@typescript-eslint/no-unused-vars","'sendMessage' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","no-native-reassign",["121"],"no-negated-in-lhs",["122"],"'dialogsPageType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setCurrentPage' is defined but never used.","'setTotalCount' is defined but never used.","'setUsers' is defined but never used.","'toggleIsFetching' is defined but never used.","'UserApi' is defined but never used.","no-global-assign","no-unsafe-negation"]